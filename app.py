import streamlit as st
import json

# ================================
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
# ================================
with open("data.json", "r", encoding="utf-8") as f:
    terms = json.load(f)

# ================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ================================
st.set_page_config(page_title="–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ “±“ì—ã–º–¥—ã“õ-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è–ª—ã“õ —Å”©–∑–¥—ñ–∫", layout="wide")
st.title("üìò –≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ “±“ì—ã–º–¥—ã“õ-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è–ª—ã“õ —Å”©–∑–¥—ñ–∫")

# ================================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞
# ================================
def show_term(term):
    st.subheader(f"üñ• {term['kk']} / {term['ru']} / {term['en']}")
    
    with st.expander("üìñ –ê–Ω—ã“õ—Ç–∞–º–∞ / –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ / Definition", expanded=True):
        st.markdown(f"**KK:** {term['definition']['kk']}")
        st.markdown(f"**RU:** {term['definition']['ru']}")
        st.markdown(f"**EN:** {term['definition']['en']}")
    
    with st.expander("üí¨ –ú—ã—Å–∞–ª / –ü—Ä–∏–º–µ—Ä / Example"):
        st.markdown(f"**KK:** {term['example']['kk']}")
        st.markdown(f"**RU:** {term['example']['ru']}")
        st.markdown(f"**EN:** {term['example']['en']}")
    
    if 'relations' in term:
        with st.expander("üß† –°–µ–º–∞–Ω—Ç–∏–∫–∞–ª—ã“õ –±–∞–π–ª–∞–Ω—ã—Å—Ç–∞—Ä / Semantic Relations"):
            rel = term['relations']
            if rel.get('synonyms'):
                st.markdown("**üîÅ –°–∏–Ω–æ–Ω–∏–º–¥–µ—Ä / Synonyms:**")
                for s in rel['synonyms']:
                    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å–∏–Ω–æ–Ω–∏–º –∑–∞–¥–∞—ë–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –≤ session_state
                    if st.button(s, key=f"syn_{s}"):
                        st.session_state["selected_term"] = s
            if rel.get('antonyms'):
                st.markdown(f"**üÜö –ê–Ω—Ç–æ–Ω–∏–º–¥–µ—Ä / Antonyms:** {', '.join(rel['antonyms'])}")
            if rel.get('broader_term'):
                st.markdown(f"**üîº –ñ–∞–ª–ø—ã–ª–∞–º–∞ “±“ì—ã–º / Broader term:** {rel['broader_term']}")
            if rel.get('narrower_terms'):
                st.markdown(f"**üîΩ –ê—Ä–Ω–∞–π—ã “±“ì—ã–º–¥–∞—Ä / Narrower terms:** {', '.join(rel['narrower_terms'])}")
            if rel.get('related_terms'):
                st.markdown(f"**üîó “ö–∞—Ç—ã—Å—Ç—ã “±“ì—ã–º–¥–∞—Ä / Related terms:** {', '.join(rel['related_terms'])}")
    
    if term.get("image"):
        st.image(term['image'], caption="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è", use_column_width=True)
    
    if term.get("source"):
        st.markdown(f"üîó [–î–µ—Ä–µ–∫–∫”©–∑ / –ò—Å—Ç–æ—á–Ω–∏–∫ / Source]({term['source']})")
    
    st.markdown("---")

# ================================
# –†–µ–∂–∏–º: –ø–æ–∏—Å–∫ –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ª–µ–∫—Ü–∏—è–º
# ================================

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞
search_query = st.text_input("üîç –¢–µ—Ä–º–∏–Ω–¥—ñ —ñ–∑–¥–µ—É:", "").strip().lower()

if search_query:
    # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: –æ–±—Ö–æ–¥ –ø–æ –≤—Å–µ–º –ª–µ–∫—Ü–∏—è–º –∏ —Ç–µ—Ä–º–∏–Ω–∞–º
    st.header(f"üîé –Ü–∑–¥–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ: \"{search_query}\"")
    found_terms = []

    for lecture, term_list in terms.items():
        for term in term_list:
            if (search_query in term['kk'].lower() or 
                search_query in term['ru'].lower() or 
                search_query in term['en'].lower()):
                found_terms.append((lecture, term))
    
    if not found_terms:
        st.warning("üõë –ë“±–ª —ñ–∑–¥–µ—É —Å“±—Ä–∞–Ω—ã—Å—ã–Ω–∞ —Å”ô–π–∫–µ—Å —Ç–µ—Ä–º–∏–Ω–¥–µ—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.")
    else:
        for lecture, term in found_terms:
            st.subheader(f"üìÇ {lecture} | üñ• {term['kk']} / {term['ru']} / {term['en']}")
            with st.expander("üìñ –ê–Ω—ã“õ—Ç–∞–º–∞ / –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ / Definition"):
                st.markdown(f"**KK:** {term['definition']['kk']}")
                st.markdown(f"**RU:** {term['definition']['ru']}")
                st.markdown(f"**EN:** {term['definition']['en']}")
            with st.expander("üí¨ –ú—ã—Å–∞–ª / –ü—Ä–∏–º–µ—Ä / Example"):
                st.markdown(f"**KK:** {term['example']['kk']}")
                st.markdown(f"**RU:** {term['example']['ru']}")
                st.markdown(f"**EN:** {term['example']['en']}")
            
            if 'relations' in term:
                with st.expander("üß† –°–µ–º–∞–Ω—Ç–∏–∫–∞–ª—ã“õ –±–∞–π–ª–∞–Ω—ã—Å—Ç–∞—Ä / Semantic Relations"):
                    rel = term['relations']
                    if rel.get('synonyms'):
                        st.markdown("**üîÅ –°–∏–Ω–æ–Ω–∏–º–¥–µ—Ä / Synonyms:**")
                        for s in rel['synonyms']:
                            if st.button(s, key=f"syn_search_{s}"):
                                st.session_state["selected_term"] = s
                    if rel.get('antonyms'):
                        st.markdown(f"**üÜö –ê–Ω—Ç–æ–Ω–∏–º–¥–µ—Ä / Antonyms:** {', '.join(rel['antonyms'])}")
                    if rel.get('broader_term'):
                        st.markdown(f"**üîº –ñ–∞–ª–ø—ã–ª–∞–º–∞ “±“ì—ã–º / Broader term:** {rel['broader_term']}")
                    if rel.get('narrower_terms'):
                        st.markdown(f"**üîΩ –ê—Ä–Ω–∞–π—ã “±“ì—ã–º–¥–∞—Ä / Narrower terms:** {', '.join(rel['narrower_terms'])}")
                    if rel.get('related_terms'):
                        st.markdown(f"**üîó “ö–∞—Ç—ã—Å—Ç—ã “±“ì—ã–º–¥–∞—Ä / Related terms:** {', '.join(rel['related_terms'])}")
            
            if term.get("image"):
                st.image(term['image'], caption="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è", use_column_width=True)
            if term.get("source"):
                st.markdown(f"üîó [–î–µ—Ä–µ–∫–∫”©–∑ / –ò—Å—Ç–æ—á–Ω–∏–∫ / Source]({term['source']})")
            
            st.markdown("---")
else:
    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –ª–µ–∫—Ü–∏—è–º
    st.session_state.setdefault("selected_term", None)
    
    lecture = st.sidebar.selectbox("üìÇ –¢–∞“£–¥–∞“£—ã–∑ –¥”ô—Ä—ñ—Å (—Ç–µ–º—É):", list(terms.keys()))
    st.header(lecture)
    
    selected = None
    target = st.session_state.get("selected_term")
    # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ –ø–æ 'kk'
    for term in terms[lecture]:
        if term["kk"] == target:
            selected = term
            break

    # –í—ã–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ (–µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è) –ø–µ—Ä–≤—ã–º
    if selected:
        show_term(selected)
        st.divider()
    
    # –í—ã–≤–æ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ —Ç–µ–∫—É—â–µ–π –ª–µ–∫—Ü–∏–∏
    for term in terms[lecture]:
        if term != selected:
            show_term(term)
