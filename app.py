import streamlit as st
import json
import pandas as pd

# JSON —Ñ–∞–π–ª–¥—ã –∂“Ø–∫—Ç–µ—É
with open("data.json", "r", encoding="utf-8") as f:
    terms = json.load(f)

st.set_page_config(page_title="–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ “±“ì—ã–º–¥—ã“õ-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è–ª—ã“õ —Å”©–∑–¥—ñ–∫", layout="wide")
st.title("üìò–ê–ö–¢ –∫—É—Ä—Å—ã –±–æ–π—ã–Ω—à–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ “±“ì—ã–º–¥—ã“õ-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è–ª—ã“õ —Å”©–∑–¥—ñ–∫")

if 'selected_term' not in st.session_state:
    st.session_state['selected_term'] = None

# Excel –∂“Ø–∫—Ç–µ—É
uploaded_file = st.sidebar.file_uploader("üì§ Excel —Ñ–∞–π–ª –∂“Ø–∫—Ç–µ—É (–∂–∞“£–∞ —Ç–µ—Ä–º–∏–Ω–¥–µ—Ä)", type=["xlsx"])
if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        new_terms = []
        for _, row in df.iterrows():
            term = {
                'kk': row.get('kk', ''),
                'ru': row.get('ru', ''),
                'en': row.get('en', ''),
                'definition': {
                    'kk': row.get('definition_kk', ''),
                    'ru': row.get('definition_ru', ''),
                    'en': row.get('definition_en', '')
                },
                'example': {
                    'kk': row.get('example_kk', ''),
                    'ru': row.get('example_ru', ''),
                    'en': row.get('example_en', '')
                },
                'relations': {
                    'synonyms': str(row.get('relations_synonyms', '')).split(',') if row.get('relations_synonyms') else [],
                    'general_concept': row.get('relations_general_concept', ''),
                    'specific_concepts': str(row.get('relations_specific_concepts', '')).split(',') if row.get('relations_specific_concepts') else [],
                    'associative': str(row.get('relations_associative', '')).split(',') if row.get('relations_associative') else []
                }
            }
            new_terms.append(term)

        lecture_name = st.sidebar.selectbox("üìö “ö–∞–π –¥”ô—Ä—ñ—Å–∫–µ “õ–æ—Å—ã–ª–∞–¥—ã?", list(terms.keys()))
        if st.sidebar.button("‚ûï –¢–µ—Ä–º–∏–Ω–¥–µ—Ä–¥—ñ “õ–æ—Å—É"):
            terms[lecture_name].extend(new_terms)
            with open("data.json", "w", encoding="utf-8") as f:
                json.dump(terms, f, ensure_ascii=False, indent=2)
            st.success(f"‚úÖ {len(new_terms)} –∂–∞“£–∞ —Ç–µ—Ä–º–∏–Ω “õ–æ—Å—ã–ª–¥—ã!")
    except Exception as e:
        st.error(f"‚ùå Excel —Ñ–∞–π–ª–¥—ã –æ“õ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")

# –Ü–∑–¥–µ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω “õ–æ—Å—É
search_query = st.text_input("üîç –¢–µ—Ä–º–∏–Ω–¥—ñ —ñ–∑–¥–µ—É:", "").strip().lower()

# –î”ô—Ä—ñ—Å —Ç–∞“£–¥–∞—É—ã
lecture = st.sidebar.radio("üìÇ –î”ô—Ä—ñ—Å —Ç–∞“£–¥–∞“£—ã–∑:", list(terms.keys()))

# –¢–µ—Ä–º–∏–Ω —Ç—ñ–∑—ñ–º—ñ
if not search_query:
    st.write("### üìã –¢–µ—Ä–º–∏–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ:")
    for i, term in enumerate(terms[lecture]):
        name = term.get("kk", "")
        if st.button(f"üîπ {name}", key=f"term_{i}"):
            st.session_state['selected_term'] = name

# –¢–µ—Ä–º–∏–Ω –º”ô–ª—ñ–º–µ—Ç—ñ
selected = st.session_state.get("selected_term")
if selected:
    for term in terms[lecture]:
        if term.get("kk", "") == selected:
            term_text = f"{term.get('kk', '')} / {term.get('ru', '')} / {term.get('en', '')}"
            st.markdown(f"### üñ• {term_text}")

            st.markdown("**üìñ –ê–Ω—ã“õ—Ç–∞–º–∞:**")
            st.markdown(f"**KK:** {term['definition'].get('kk', '–ñ–æ“õ')}")
            st.markdown(f"**RU:** {term['definition'].get('ru', '–ù–µ—Ç')}")
            st.markdown(f"**EN:** {term['definition'].get('en', 'No')}")

            st.markdown("**üí¨ –ú—ã—Å–∞–ª:**")
            st.markdown(f"**KK:** {term['example'].get('kk', '–ñ–æ“õ')}")
            st.markdown(f"**RU:** {term['example'].get('ru', '–ù–µ—Ç')}")
            st.markdown(f"**EN:** {term['example'].get('en', 'No')}")

            if term.get("image"):
                st.image(term["image"], width=200)
            if term.get("source"):
                st.markdown(f"üîó [–î–µ—Ä–µ–∫–∫”©–∑ / –ò—Å—Ç–æ—á–Ω–∏–∫ / Source]({term['source']})")
