import streamlit as st
import json
import pandas as pd
import requests
import base64
import logging
from difflib import get_close_matches
from streamlit.components.v1 import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
REQUIRED_SECRETS = ["GITHUB_TOKEN", "REPO_OWNER", "REPO_NAME"]
REQUIRED_TERM_KEYS = ['kk', 'ru', 'en']

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def validate_secrets():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    missing = [key for key in REQUIRED_SECRETS if key not in st.secrets]
    if missing:
        st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ä–µ—Ç—ã: {', '.join(missing)}")
        raise RuntimeError("Missing secrets")

def load_github_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub"""
    try:
        url = f"https://api.github.com/repos/{st.secrets.REPO_OWNER}/{st.secrets.REPO_NAME}/contents/data.json"
        response = requests.get(
            url,
            headers={"Authorization": f"token {st.secrets.GITHUB_TOKEN}"}
        )
        response.raise_for_status()
        
        content = base64.b64decode(response.json()["content"]).decode("utf-8")
        return json.loads(content), response.json()["sha"]
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub")
        return {}, None

def validate_term(term):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Ä–º–∏–Ω–∞"""
    return all(key in term for key in REQUIRED_TERM_KEYS)

def safe_get(data, *keys, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    for key in keys:
        data = data.get(key, {}) if isinstance(data, dict) else default
    return data if data is not None else default

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ====================
def display_term(term):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞"""
    try:
        with st.container():
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = safe_get(term, 'kk', default='–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            st.markdown(f"### üåê {title}")
            
            # –í–∫–ª–∞–¥–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            tabs = st.tabs(["üìñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "üí¨ –ü—Ä–∏–º–µ—Ä", "üîó –°–≤—è–∑–∏"])
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            with tabs[0]:
                st.markdown(f"**KK:** {safe_get(term, 'definition', 'kk', default='-')}")
                st.markdown(f"**RU:** {safe_get(term, 'definition', 'ru', default='-')}")
                st.markdown(f"**EN:** {safe_get(term, 'definition', 'en', default='-')}")
            
            # –ü—Ä–∏–º–µ—Ä—ã
            with tabs[1]:
                st.markdown(f"**KK:** {safe_get(term, 'example', 'kk', default='-')}")
                st.markdown(f"**RU:** {safe_get(term, 'example', 'ru', default='-')}")
                st.markdown(f"**EN:** {safe_get(term, 'example', 'en', default='-')}")
            
            # –°–≤—è–∑–∏
            with tabs[2]:
                cols = st.columns(2)
                with cols[0]:
                    st.markdown("üîÅ **–°–∏–Ω–æ–Ω–∏–º—ã:**\n" + "\n".join(
                        f"- {s}" for s in safe_get(term, 'relations', 'synonyms', default=[])
                    ))
                    st.markdown("üîº **–û–±—â–µ–µ –ø–æ–Ω—è—Ç–∏–µ:**\n" + safe_get(term, 'relations', 'general', default='-'))
                
                with cols[1]:
                    st.markdown("üîΩ **–ß–∞—Å—Ç–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:**\n" + "\n".join(
                        f"- {s}" for s in safe_get(term, 'relations', 'specific', default=[])
                    ))
                    st.markdown("üîó **–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏:**\n" + "\n".join(
                        f"- {s}" for s in safe_get(term, 'relations', 'associative', default=[])
                    ))
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞: {str(e)}")
        st.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞")

def show_semantic_map(terms_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã"""
    html_content = "<div style='padding:20px; font-family:Arial;'><h3>üîó –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏</h3>"
    
    for lecture in terms_data.values():
        for term in lecture:
            try:
                title = safe_get(term, 'kk', default='–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                synonyms = safe_get(term, 'relations', 'synonyms', default=[])
                specific = safe_get(term, 'relations', 'specific', default=[])
                relations = ', '.join(synonyms + specific)
                
                html_content += f"<p><b>{title}</b> ‚Üí {relations or '–Ω–µ—Ç —Å–≤—è–∑–µ–π'}</p>"
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞: {str(e)}")
                continue
    
    html_content += "</div>"
    html(html_content, height=500, scrolling=True)

# ==================== –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° ====================
def main():
    st.set_page_config("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å", layout="wide")
    st.title("üìö –¢–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –ê–ö–¢")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        terms_data, _ = load_github_data()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
        valid_terms = [
            term for lecture in terms_data.values() 
            for term in lecture 
            if validate_term(term)
        ]
        
        # –ü–æ–∏—Å–∫
        search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–µ—Ä–º–∏–Ω–∞–º", help="–ò—â–∏—Ç–µ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ")
        filtered_terms = [
            term for term in valid_terms
            if search_query.lower() in str(term).lower()
        ] if search_query else valid_terms
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if filtered_terms:
            st.subheader(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: {len(filtered_terms)}")
            for term in filtered_terms:
                display_term(term)
                st.divider()
        else:
            st.info("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        with st.sidebar:
            st.header("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            if st.button("üåç –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤—è–∑–∏"):
                show_semantic_map(terms_data)
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        st.error("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

if __name__ == "__main__":
    try:
        validate_secrets()
        main()
    except Exception as e:
        st.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ")
