# ==================== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ====================
def main():
    st.set_page_config("–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ “±“ì—ã–º–¥—ã“õ-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è–ª—ã“õ —Å”©–∑–¥—ñ–∫", layout="wide")
    st.title("üìò –ê–ö–¢ –∫—É—Ä—Å—ã: –≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ “±“ì—ã–º–¥—ã“õ-—Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è–ª—ã“õ —Å”©–∑–¥—ñ–∫")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    terms_data, sha = load_github_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not terms_data or not isinstance(terms_data, dict):
        st.error("‚ùå –î–µ—Ä–µ–∫—Ç–µ—Ä –∂“Ø–∫—Ç–µ–ª–º–µ–¥—ñ –Ω–µ–º–µ—Å–µ “õ–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç")
        return
    
    all_terms = [term for lecture in terms_data.values() for term in lecture]
    
    # ==================== –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ====================
    with st.sidebar:
        st.header("‚öôÔ∏è –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ Excel
        uploaded_file = st.file_uploader("üì§ Excel —Ñ–∞–π–ª –∂“Ø–∫—Ç–µ—É", type=["xlsx"])
        if uploaded_file:
            new_terms = parse_excel(uploaded_file)
            if new_terms:
                selected_lecture = st.selectbox("üìö –î”ô—Ä—ñ—Å —Ç–∞“£–¥–∞“£—ã–∑", list(terms_data.keys()))
                if st.button("üíæ –¢–µ—Ä–º–∏–Ω–¥–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É"):
                    terms_data[selected_lecture].extend(new_terms)
                    update_github(terms_data, sha)
                    st.rerun()
        
        # –°–µ–º–∞–Ω—Ç–∏–∫–∞–ª—ã“õ –∫–∞—Ä—Ç–∞
        if st.button("üåç –ë–∞–π–ª–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç—É"):
            html_content = "<div style='padding:20px; font-family:Arial;'>"
            html_content += "<h3>üîó –°–µ–º–∞–Ω—Ç–∏–∫–∞–ª—ã“õ –±–∞–π–ª–∞–Ω—ã—Å—Ç–∞—Ä</h3>"
            
            for lecture in terms_data.values():
                for term in lecture:
                    try:
                        kk = term.get('kk', '–ê—Ç–∞—É—ã –∂–æ“õ')
                        relations = term.get('relations', {})
                        elements = []
                        if 'synonyms' in relations:
                            elements.extend(relations['synonyms'])
                        if 'specific' in relations:
                            elements.extend(relations['specific'])
                        html_content += f"<p><b>{kk}</b> ‚Üí {', '.join(elements)}</p>"
                    except Exception as e:
                        continue
            
            html_content += "</div>"
            html(html_content, height=500, scrolling=True)

    # ==================== –ù–µ–≥—ñ–∑–≥—ñ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ====================
    view_mode = st.radio("üîç –ö”©—Ä—ñ–Ω—É —Ä–µ–∂–∏–º—ñ:", 
                        ["üìÇ –¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞", "üîé –ë–∞—Ä–ª—ã“õ —Ç–µ—Ä–º–∏–Ω–¥–µ—Ä–¥–µ–Ω —ñ–∑–¥–µ—É"], 
                        horizontal=True)

    if view_mode == "üìÇ –¢–∞“õ—ã—Ä—ã–ø –±–æ–π—ã–Ω—à–∞":
        # –¢–∞“õ—ã—Ä—ã–ø—Ç—ã —Ç–∞“£–¥–∞—É
        selected_lecture = st.selectbox(
            "üìö –¢–∞“õ—ã—Ä—ã–ø—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:",
            list(terms_data.keys()),
            index=0,
            key="lecture_selector"
        )

        # –§–∏–ª—å—Ç—Ä–ª–µ—Ä
        st.subheader(f"üìñ –¢–∞“õ—ã—Ä—ã–ø: {selected_lecture}")
        
        # 1. –Ü—à–∫—ñ —ñ–∑–¥–µ—É
        topic_search = st.text_input("üîç –¢–∞“õ—ã—Ä—ã–ø —ñ—à—ñ–Ω–¥–µ —ñ–∑–¥–µ—É")
        
        # 2. ”ò—Ä—ñ–ø –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑–≥—ñ
        initial_terms = terms_data[selected_lecture]
        letters = sorted({term['kk'][0].upper() for term in initial_terms if term.get('kk')})
        selected_letter = st.selectbox("üî§ ”ò—Ä—ñ–ø –±–æ–π—ã–Ω—à–∞ —Å“Ø–∑–≥—ñ", ["–ë–∞—Ä–ª—ã“ì—ã"] + letters)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        filtered_terms = [
            term for term in initial_terms
            if (topic_search.lower() in term.get('kk', '').lower()) and 
               (selected_letter == "–ë–∞—Ä–ª—ã“ì—ã" or term.get('kk', '').upper().startswith(selected_letter))
        ]

        # 3. –°“±—Ä—ã–ø—Ç–∞—É
        sort_option = st.selectbox(
            "üîÉ –°“±—Ä—ã–ø—Ç–∞—É",
            options=["–ê ‚Üí –Ø (“õ–∞–∑)", "–Ø ‚Üí –ê (“õ–∞–∑)", "–ú—ã—Å–∞–ª–¥–∞—Ä—ã –±–∞—Ä–ª–∞—Ä –∞–ª–¥—ã–º–µ–Ω"],
            index=0
        )
        
        if sort_option == "–ê ‚Üí –Ø (“õ–∞–∑)":
            filtered_terms.sort(key=lambda x: x.get('kk', ''))
        elif sort_option == "–Ø ‚Üí –ê (“õ–∞–∑)":
            filtered_terms.sort(key=lambda x: x.get('kk', ''), reverse=True)
        elif sort_option == "–ú—ã—Å–∞–ª–¥–∞—Ä—ã –±–∞—Ä–ª–∞—Ä –∞–ª–¥—ã–º–µ–Ω":
            filtered_terms.sort(key=lambda x: bool(x.get('example')), reverse=True)

        # 4. –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        ITEMS_PER_PAGE = 15
        total_pages = max(1, (len(filtered_terms) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)
        page = st.number_input("üìÑ –ë–µ—Ç", 
                              min_value=1, 
                              max_value=total_pages, 
                              value=1,
                              key="pagination")
        
        # –¢–µ—Ä–º–∏–Ω–¥–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É
        start_idx = (page-1)*ITEMS_PER_PAGE
        paginated_terms = filtered_terms[start_idx : start_idx+ITEMS_PER_PAGE]
        
        st.write(f"üî¢ –¢–µ—Ä–º–∏–Ω–¥–µ—Ä —Å–∞–Ω—ã: {len(filtered_terms)}")
        st.caption(f"–ë–µ—Ç {page} / {total_pages}")
        
        for term in paginated_terms:
            display_term_compact(term)
        
        # –¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã –∫”©—Ä—Å–µ—Ç—É
        if st.session_state.get('selected_term'):
            display_term_full(st.session_state.selected_term)
            if st.button("‚ùå –ñ–∞–±—É"):
                del st.session_state.selected_term
                st.rerun()

    else:
        # –ë–∞—Ä–ª—ã“õ —Ç–µ—Ä–º–∏–Ω–¥–µ—Ä–¥–µ–Ω —ñ–∑–¥–µ—É
        search_query = st.text_input("üîç –¢–µ—Ä–º–∏–Ω–¥–µ—Ä–¥—ñ —ñ–∑–¥–µ—É", help="–ö–µ–∑ –∫–µ–ª–≥–µ–Ω —Ç—ñ–ª–¥–µ —ñ–∑–¥–µ“£—ñ–∑")
        filtered_terms = [
            term for term in all_terms
            if search_query.lower() in str(term).lower()
        ] if search_query else all_terms
        
        if filtered_terms:
            st.subheader(f"üìö –¢–∞–±—ã–ª–¥—ã: {len(filtered_terms)} —Ç–µ—Ä–º–∏–Ω")
            for term in filtered_terms:
                display_term_compact(term)
                st.divider()
        else:
            st.info("üîç –ï—à—Ç–µ“£–µ —Ç–∞–±—ã–ª“ì–∞–Ω –∂–æ“õ. –Ü–∑–¥–µ—É —Å“±—Ä–∞–Ω—ã—Å—ã–Ω ”©–∑–≥–µ—Ä—Ç—ñ“£—ñ–∑.")

if __name__ == "__main__":
    main()
